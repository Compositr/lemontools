/**
 * @fileoverview Mars Rover API Wrapper
 * @since v3.0.0
 */

import axios from "axios";
import NumberUtils from "../../utils/number/NumberUtils";
import type APIWrapper from "../../utils/typings/api/APIWrapper";

export default class MarsRovers implements APIWrapper {
  name = "marsRovers";

  /**
   * Get some Mars Rover photos
   * @param rover Rover to get image from
   * @param opts Optional additional options
   * @returns Array of photos (up to 25)
   */
  static async search(rover: Rovers, opts?: OptionalParams) {
    const sol = opts?.sol || NumberUtils.random(100, 1000);
    const camera = opts?.camera;

    const { data }: { data: APIResponse } = await axios.get(
      `https://api.nasa.gov/mars-photos/api/v1/rovers/${rover}/photos?sol=${sol}${
        camera ? `&camera=${camera}` : ""
      }&api_key=${process.env.NASA_KEY}`
    );

    // Camelcase stuff & remove/rename fields
    return data.photos.map(
      ({
        id,
        camera,
        earth_date: earthDate,
        rover: { name: rover },
        img_src: src,
      }) => ({
        id,
        camera,
        earthDate,
        rover,
        src,
      })
    );
  }
}

export interface OptionalParams {
  sol?: number;
  camera?: Cameras;
}

export type Rovers = "curiosity" | "opportunity" | "spirit";
export type Cameras =
  | "fhaz"
  | "rhaz"
  | "mast"
  | "chemcam"
  | "mahli"
  | "mardi"
  | "navcam"
  | "pancam"
  | "minites"
  | "minites";

// Generated by https://quicktype.io

export interface APIResponse {
  photos: Photo[];
}

export interface Photo {
  id: number;
  sol: number;
  camera: Camera;
  img_src: string;
  earth_date: string;
  rover: Rover;
}

export interface Camera {
  id: number;
  name: CameraName;
  rover_id: number;
  full_name: FullName;
}

export enum FullName {
  ChemistryAndCameraComplex = "Chemistry and Camera Complex",
  FrontHazardAvoidanceCamera = "Front Hazard Avoidance Camera",
  MarsDescentImager = "Mars Descent Imager",
  MastCamera = "Mast Camera",
  NavigationCamera = "Navigation Camera",
  RearHazardAvoidanceCamera = "Rear Hazard Avoidance Camera",
}

export enum CameraName {
  Chemcam = "CHEMCAM",
  Fhaz = "FHAZ",
  Mardi = "MARDI",
  Mast = "MAST",
  Navcam = "NAVCAM",
  Rhaz = "RHAZ",
}

export interface Rover {
  id: number;
  name: RoverName;
  landing_date: string;
  launch_date: string;
  status: Status;
}

export enum RoverName {
  Curiosity = "Curiosity",
}

export enum Status {
  Active = "active",
}
