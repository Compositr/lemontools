import Command from "../../classes/Command";
import { embed, epherrf } from "../../util/embed";
import { capitalise } from "../../util/strings";
import { getJSON } from "../../util/web";

export default new Command({
  name: "dictionary",
  description: "Checks the spelling and definition of a word.",
  category: "search",
  perms: [],
  options: [
    {
      name: "word",
      description: "The word to check.",
      required: true,
      type: "STRING",
    },
  ],
  async execute({ bot, args, ctx }) {
    await ctx.deferReply();
    const word = args.getString("word");
    const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${word}`;
    const { data } = await getJSON<{
      data: [DictionaryDefinition] & { title: string };
    }>(url);
    // If the word is not found, return not found
    if (data?.title) {
      return ctx.editReply(epherrf(`No definition found for **${word}**.`));
    }
    const def = data?.[0];
    if (!def || !def.meanings?.length)
      return ctx.editReply(epherrf(`No definition found for **${word}**.`));
    const em = embed(
      {
        title: def?.word,
        fields: def.meanings.map((m) => ({
          name: `${capitalise(m.partOfSpeech)}`,
          value: m.definitions[0].definition,
        })),
      },
      ctx,
      bot
    );
    return ctx.editReply({
      embeds: [em],
    });
  },
});

// Generated by https://quicktype.io

export interface DictionaryDefinition {
  word: string;
  phonetic?: string;
  phonetics: Phonetic[];
  origin?: string;
  meanings: Meaning[];
}

export interface Meaning {
  partOfSpeech?: string;
  definitions: Definition[];
}

export interface Definition {
  definition: string;
  example?: string;
  synonyms: string[];
  antonyms: any[];
}

export interface Phonetic {
  text?: string;
  audio?: string;
}
